AWSTemplateFormatVersion: 2010-09-09
Description: >-
  StateMachine which can be used as custom CF resource that creates necessary
  prerequisites for Kubernetes 
Resources:
  LambdaExecutionPolicyCallStateMachine:
    Type: 'AWS::IAM::ManagedPolicy'
    Properties:
      Path: /
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Sid: states
            Effect: Allow
            Action:
              - 'states:StartExecution'
              - 'states:DescribeExecution'
            Resource: '*'
          - Sid: log
            Effect: Allow
            Action:
              - 'logs:CreateLogGroup'
              - 'logs:CreateLogStream'
              - 'logs:PutLogEvents'
            Resource: 'arn:aws:logs:*:*:*'
  LambdaExecutionPolicyCreateKubeNamespace:
    Type: 'AWS::IAM::ManagedPolicy'
    Properties:
      Path: /
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Sid: route53
            Effect: Allow
            Action:
              - 'eks:*'
            Resource: '*'
          - Sid: sts
            Effect: Allow
            Action:
              - 'sts:AssumeRole'
            Resource: !Ref CrossAccountArn
          - Sid: log
            Effect: Allow
            Action:
              - 'logs:CreateLogGroup'
              - 'logs:CreateLogStream'
              - 'logs:PutLogEvents'
            Resource: 'arn:aws:logs:*:*:*'
  LambdaExecutionPolicyCreateVault:
    Type: 'AWS::IAM::ManagedPolicy'
    Properties:
      Path: /
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Sid: route53
            Effect: Allow
            Action:
              - 'eks:*'
            Resource: '*'
          - Sid: sts
            Effect: Allow
            Action:
              - 'sts:AssumeRole'
            Resource: !Ref CrossAccountArn
          - Sid: log
            Effect: Allow
            Action:
              - 'logs:CreateLogGroup'
              - 'logs:CreateLogStream'
              - 'logs:PutLogEvents'
            Resource: 'arn:aws:logs:*:*:*'
  LambdaExecutionRoleCallStateMachine:
    Type: 'AWS::IAM::Role'
    Properties:
      ManagedPolicyArns:
        - !Ref LambdaExecutionPolicyCallStateMachine
      AssumeRolePolicyDocument:
        Statement:
          - Action:
              - 'sts:AssumeRole'
            Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
      Path: /
  LambdaExecutionRoleCreateKubeNamespace:
    Type: 'AWS::IAM::Role'
    Properties:
      ManagedPolicyArns:
        - !Ref LambdaExecutionPolicyCreateKubeNamespace
      AssumeRolePolicyDocument:
        Statement:
          - Action:
              - 'sts:AssumeRole'
            Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
      Path: /
  LambdaExecutionRoleCreateVault:
    Type: 'AWS::IAM::Role'
    Properties:
      ManagedPolicyArns:
        - !Ref LambdaExecutionPolicyCreateKubeNamespace
      AssumeRolePolicyDocument:
        Statement:
          - Action:
              - 'sts:AssumeRole'
            Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
      Path: /
  LambdaCallStateMachine:
    Type: 'AWS::Lambda::Function'
    Properties:
      Handler: index.lambda_handler
      FunctionName: !Sub 'CallStateMachine-${AWS::AccountId}'
      Environment:
        Variables:
          statemachineARN: !Ref CertificateStateMachine
      Role: !Sub '${LambdaExecutionRoleCallStateMachine.Arn}'
      Code:
        ZipFile: |
          from botocore.exceptions import ClientError
          import boto3
          import cfnresponse
          import os
          import json

          statemachineARN = os.getenv('statemachineARN')

          def lambda_handler(event, context):
              sfn_client = boto3.client('stepfunctions')
              try:
                  response = sfn_client.start_execution(stateMachineArn=statemachineARN,input=(json.dumps(event)))
                  sfn_arn = response.get('executionArn')
                  print(sfn_arn)
              except Exception:
                  print('Could not run the Step Function')
                  responseData = {}
                  responseData['Error'] = "CouldNotCallStateMachine"
                  response=cfnresponse.send(event, context, FAILED, responseData)
                  return(response)
              return(sfn_arn)
      Runtime: python2.7
      Timeout: 25
  LambdaCreateKubeNamespace:
    Type: 'AWS::Lambda::Function'
    Properties:
      Handler: index.lambda_handler
      FunctionName: !Sub 'CreateKubeNamespace-${AWS::AccountId}'
      Environment:
        Variables:
          RoleArn: !Ref CrossAccountArn
      Role: !Sub '${LambdaExecutionRoleCreateKubeNamespace.Arn}'
      Code:
        ZipFile: |
          from botocore.exceptions import ClientError
          import boto3
          import os

          def lambda_handler(event, context):
              RoleArn = os.getenv('RoleArn')
              try:
                  sts_connection = boto3.client('sts')
                  acct_b = sts_connection.assume_role(
                      RoleArn=RoleArn,
                      RoleSessionName="cross_acct_lambda"
                  )
                  ACCESS_KEY = acct_b['Credentials']['AccessKeyId']
                  SECRET_KEY = acct_b['Credentials']['SecretAccessKey']
                  SESSION_TOKEN = acct_b['Credentials']['SessionToken']
              except Exception as e:
                  print(e)
                  message = 'Could not get assumerole for Lambda function'
                  print(message)
              client = boto3.client(
                      'eks',
                      aws_access_key_id=ACCESS_KEY,
                      aws_secret_access_key=SECRET_KEY,
                      aws_session_token=SESSION_TOKEN,
                  )
              response = client
              print (response)
      Runtime: python2.7
      Timeout: 25
  LambdaCreateVault:
    Type: 'AWS::Lambda::Function'
    Properties:
      Handler: index.lambda_handler
      FunctionName: !Sub 'CreateVault-${AWS::AccountId}'
      Environment:
        Variables:
          RoleArn: !Ref CrossAccountArn
      Role: !Sub '${LambdaExecutionRoleCreateVault.Arn}'
      Code:
        ZipFile: |
          from botocore.exceptions import ClientError
          import boto3
          import os

          def lambda_handler(event, context):
              RoleArn = os.getenv('RoleArn')
              try:
                  sts_connection = boto3.client('sts')
                  acct_b = sts_connection.assume_role(
                      RoleArn=RoleArn,
                      RoleSessionName="cross_acct_lambda"
                  )
                  ACCESS_KEY = acct_b['Credentials']['AccessKeyId']
                  SECRET_KEY = acct_b['Credentials']['SecretAccessKey']
                  SESSION_TOKEN = acct_b['Credentials']['SessionToken']
              except Exception as e:
                  print(e)
                  message = 'Could not get assumerole for Lambda function'
                  print(message)
              response = event['Namespace']
              print (response)
      Runtime: python2.7
      Timeout: 25
  StateMachineRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: !Sub 'states.${AWS::Region}.amazonaws.com'
            Action: 'sts:AssumeRole'
      Path: /
      Policies:
        - PolicyName: StatesExecutionPolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 'lambda:InvokeFunction'
                Resource: '*'
  OrchStateMachine:
    Type: 'AWS::StepFunctions::StateMachine'
    Properties:
      DefinitionString: |-
        {
          "StartAt": "Choice Action",
          "States": {
            "CreateKubeNamespace": {
              "Type": "Task",
              "Resource": "${LambdaCreateKubeNamespace.Arn}",
              "Next": "SendResultCreation",
              "Parameters": {
                      "Name.$": "$.ResourceProperties.Namespace"
                    },
              "ResultPath": "$.NamespaceArn",
            },
            "CreateVault": {
              "Type": "Task",
              "Resource": "${LambdaCreateVault.Arn}",
              "Next": "SendResultCreation",
              "Parameters": {
                      "Name.$": "$.ResourceProperties.Namespace"
                    },
              "ResultPath": "$.VaultArn",
              "End": true
            }
          }
        }
      RoleArn: !GetAtt 
        - StateMachineRole
        - Arn
Outputs:
  LambdaCallStateMachine:
    Value: !GetAtt 
      - LambdaCallStateMachine
      - Arn
    Export:
      Name: LambdaCallStateMachineArn
